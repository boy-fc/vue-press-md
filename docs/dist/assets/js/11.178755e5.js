(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{410:function(t,_,v){"use strict";v.r(_);var s=v(56),e=Object(s.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"网络安全、http协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网络安全、http协议"}},[t._v("#")]),t._v(" 网络安全、HTTP协议")]),t._v(" "),v("h4",{attrs:{id:"tcp-udp-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-udp-区别"}},[t._v("#")]),t._v(" TCP UDP 区别")]),t._v(" "),v("p",[t._v("1."),v("code",[t._v("TCP")]),t._v("向上层提供面向连接的可靠服务 ，"),v("code",[t._v("UDP")]),t._v("向上层提供无连接不可靠服务。\n2.虽然 "),v("code",[t._v("UDP")]),t._v(" 并没有 "),v("code",[t._v("TCP")]),t._v(" 传输来的准确，但是也能在很多实时性要求高的地方有所作为\n3.对数据准确性要求高，速度可以相对较慢的，可以选用"),v("code",[t._v("TCP")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("区别")]),t._v(" "),v("th",[t._v("UDP")]),t._v(" "),v("th",[t._v("TCP")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("是否连接")]),t._v(" "),v("td",[t._v("无连接")]),t._v(" "),v("td",[t._v("面向连接")])]),t._v(" "),v("tr",[v("td",[t._v("是否可靠")]),t._v(" "),v("td",[t._v("不可靠传输，不使用流量控制和拥塞控制")]),t._v(" "),v("td",[t._v("可靠传输，使用流量控制和拥塞控制")])]),t._v(" "),v("tr",[v("td",[t._v("连接对象个数")]),t._v(" "),v("td",[t._v("支持一对一，一对多，多对一和多对多交互通信")]),t._v(" "),v("td",[t._v("只能是一对一通信")])]),t._v(" "),v("tr",[v("td",[t._v("传输方式")]),t._v(" "),v("td",[t._v("面向报文")]),t._v(" "),v("td",[t._v("面向字节流")])]),t._v(" "),v("tr",[v("td",[t._v("首部开销")]),t._v(" "),v("td",[t._v("首部开销小，仅8字节")]),t._v(" "),v("td",[t._v("首部最小20字节，最大60字节")])]),t._v(" "),v("tr",[v("td",[t._v("适用场景")]),t._v(" "),v("td",[t._v("适用于实时应用（IP电话、视频会议、直播等）")]),t._v(" "),v("td",[t._v("适用于要求可靠传输的应用，例如文件传输")])])])]),t._v(" "),v("h4",{attrs:{id:"http和https区别-高频"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http和https区别-高频"}},[t._v("#")]),t._v(" Http和Https区别（高频）")]),t._v(" "),v("p",[t._v("1."),v("code",[t._v("HTTP")]),t._v(" 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头\n2."),v("code",[t._v("HTTP")]),t._v(" 是不安全的，而 HTTPS 是安全的\n3."),v("code",[t._v("HTTP")]),t._v(" 标准端口是80 ，而 HTTPS 的标准端口是443\n4."),v("code",[t._v("在OSI")]),t._v(" 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层\n5."),v("code",[t._v("HTTP")]),t._v(" 无法加密，而HTTPS 对传输的数据进行加密\n6."),v("code",[t._v("HTTP")]),t._v("无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书")]),t._v(" "),v("h4",{attrs:{id:"get和post区别-高频"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#get和post区别-高频"}},[t._v("#")]),t._v(" GET和POST区别（高频）")]),t._v(" "),v("p",[t._v("1.GET在浏览器回退不会再次请求，POST会再次提交请求\n2.GET请求会被浏览器主动缓存，POST不会，要手动设置\n3.GET请求参数会被完整保留在浏览器历史记录里，POST中的参数不会\n4.GET请求在URL中传送的参数是有长度限制的，而POST没有限制\n5.GET参数通过URL传递，POST放在Request body中\n6.GET参数暴露在地址栏不安全，POST放在报文内部更安全\n7.GET一般用于查询信息，POST一般用于提交某种信息进行某些修改操作\n8.GET产生一个TCP数据包；POST产生两个TCP数据包")]),t._v(" "),v("h4",{attrs:{id:"理解xss-csrf-ddos攻击原理以及避免方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#理解xss-csrf-ddos攻击原理以及避免方式"}},[t._v("#")]),t._v(" 理解xss，csrf，ddos攻击原理以及避免方式")]),t._v(" "),v("p",[v("code",[t._v("XSS")]),t._v("("),v("code",[t._v("Cross-Site Scripting")]),t._v("，"),v("strong",[t._v("跨站脚本攻击")]),t._v(")是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取 "),v("code",[t._v("cookie，session tokens")]),t._v("，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。")]),t._v(" "),v("p",[v("strong",[t._v("XSS避免方式：")])]),t._v(" "),v("ol",[v("li",[v("p",[v("code",[t._v("url")]),t._v("参数使用"),v("code",[t._v("encodeURIComponent")]),t._v("方法转义")])]),t._v(" "),v("li",[v("p",[t._v("尽量不是有"),v("code",[t._v("InnerHtml")]),t._v("插入"),v("code",[t._v("HTML")]),t._v("内容")])]),t._v(" "),v("li",[v("p",[t._v("使用特殊符号、标签转义符。")])])]),t._v(" "),v("p",[v("code",[t._v("CSRF")]),t._v("（"),v("code",[t._v("Cross-site request forgery")]),t._v("）"),v("strong",[t._v("跨站请求伪造")]),t._v("：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),v("p",[v("code",[t._v("CSRF")]),t._v("避免方式：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("添加验证码")])]),t._v(" "),v("li",[v("p",[t._v("使用token")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("服务端给用户生成一个token，加密后传递给用户")])]),t._v(" "),v("li",[v("p",[t._v("用户在提交请求时，需要携带这个token")])]),t._v(" "),v("li",[v("p",[t._v("服务端验证token是否正确")])])])])]),t._v(" "),v("p",[v("code",[t._v("DDoS")]),t._v("又叫分布式拒绝服务，全称 "),v("code",[t._v("Distributed Denial of Service")]),t._v("，其原理就是利用大量的请求造成资源过载，导致服务不可用。")]),t._v(" "),v("p",[v("strong",[v("code",[t._v("DDos")]),t._v("避免方式：")])]),t._v(" "),v("ol",[v("li",[t._v("限制单IP请求频率。")]),t._v(" "),v("li",[t._v("防火墙等防护设置禁止"),v("code",[t._v("ICMP")]),t._v("包等")]),t._v(" "),v("li",[t._v("检查特权端口的开放")])]),t._v(" "),v("h4",{attrs:{id:"http特性以及状态码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http特性以及状态码"}},[t._v("#")]),t._v(" http特性以及状态码")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("比如：\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("响应成功\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v("永久重定向\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("302")]),t._v("临时重定向\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),t._v("资源缓存\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v("服务器禁止访问\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v("服务器资源未找到\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v("服务器内部错误\n    "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v(" 服务器繁忙\n    1xx\tInformational（信息状态码）\t  接受请求正在处理\n    2xx\tSuccess（成功状态码）            请求正常处理完毕\n    3xx\tRedirection（重定向状态码）\t\t 需要附加操作已完成请求\n    4xx\tClient Error（客户端错误状态码）\t服务器无法处理请求\n    5xx\tServer Error（服务器错误状态码）\t服务器处理请求出错\n\n")])])]),v("h4",{attrs:{id:"http三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http三次握手"}},[t._v("#")]),t._v(" http三次握手")]),t._v(" "),v("ul",[v("li",[t._v("第一步：客户端发送SYN报文到服务端发起握手，发送完之后客户端处于SYN_Send状态")]),t._v(" "),v("li",[t._v("第二步：服务端收到SYN报文之后回复SYN和ACK报文给客户端")]),t._v(" "),v("li",[t._v("第三步：客户端收到SYN和ACK，向服务端发送一个ACK报文,客户端转为established状态，此时服务端收到ACK报文后也处于established状态，此时双方已建立了连接")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7675cb2d10834de9a07f9428ce9a427a~tplv-k3u1fbpfcp-watermark.awebp",alt:"img"}})]),t._v(" "),v("h4",{attrs:{id:"http四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http四次挥手"}},[t._v("#")]),t._v(" http四次挥手")]),t._v(" "),v("p",[t._v("刚开始双方都处于"),v("code",[t._v("establised")]),t._v(" 状态，假如是客户端先发起关闭请求，则：")]),t._v(" "),v("ol",[v("li",[t._v("第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态。")]),t._v(" "),v("li",[t._v("第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。")]),t._v(" "),v("li",[t._v("第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。")]),t._v(" "),v("li",[t._v("第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态")]),t._v(" "),v("li",[t._v("服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。")])]),t._v(" "),v("h4",{attrs:{id:"http1-0、http1-1、http2-0的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-0、http1-1、http2-0的区别"}},[t._v("#")]),t._v(" http1.0、http1.1、http2.0的区别")]),t._v(" "),v("ol",[v("li",[t._v("1和1.0相比，1.1可以一次传输多个文件")]),t._v(" "),v("li",[t._v("http1.x解析基于文本，http2.0采用二进制格式，新增特性 多路复用、header压缩、服务端推送(静态html资源)")])]),t._v(" "),v("h4",{attrs:{id:"http如何实现缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http如何实现缓存"}},[t._v("#")]),t._v(" http如何实现缓存")]),t._v(" "),v("p",[v("strong",[t._v("强缓存")]),t._v("==>Expires(过期时间)/Cache-Control(no-cache)(优先级高) 协商缓存 ==>Last-Modified/Etag(优先级高)Etag适用于经常改变的小文件  Last-Modefied适用于不怎么经常改变的大文件")]),t._v(" "),v("p",[v("strong",[t._v("强缓存策略和协商缓存策略")]),t._v("在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。")]),t._v(" "),v("h4",{attrs:{id:"输入url后http请求的完整过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#输入url后http请求的完整过程"}},[t._v("#")]),t._v(" 输入url后http请求的完整过程")]),t._v(" "),v("p",[v("strong",[t._v("建立TCP连接->发送请求行->发送请求头->（到达服务器）发送状态行->发送响应头->发送响应数据->断TCP连接")])])])}),[],!1,null,null,null);_.default=e.exports}}]);